% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shadeHeight.R
\name{shadeHeight}
\alias{shadeHeight}
\title{Shade height calculation considering sun position and buildings outlines.}
\usage{
shadeHeight(location, build, height_field, sun_az, sun_elev, b = 0.1)
}
\arguments{
\item{location}{A \code{SpatialPoints*} object specifying the location for which to calculate shade height}

\item{build}{A \code{SpatialPolygonsDataFrame} object specifying the buildings outline.}

\item{height_field}{The name of the column with building height in \code{build}}

\item{sun_az}{Sun azimuth, in decimal degrees.}

\item{sun_elev}{Sun elevation, in decimal degrees.}

\item{b}{Buffer size when joining intersection points with building outlines, to determine intersection height.}
}
\value{
Shade height, in meters.
}
\description{
This function calculates shade height at a given point (\code{location}),
taking into account:\itemize{
\item{Buildings outline, given by a polygonal layer including a height attribute}
\item{Sun position, given by elevation and azimuth angles}
}
}
\note{
For a correct geometric calculation, make sure that:\itemize{
\item{The layers \code{location} and \code{build} are projected}
\item{The values in \code{height_field} of \code{build} are given in the same distance units as the CRS (e.g. meters when using UTM)}
}
}
\examples{

library(sp)
library(rgeos)
library(raster)

# Single location
location = rgeos::gCentroid(build)
location_geo = sp::spTransform(location, "+proj=longlat +datum=WGS84")
time = as.POSIXct("2004-12-24 13:30:00", tz = "Asia/Jerusalem")
solar_position = maptools::solarpos(location_geo, time)
sun_az = solar_position[1, 1]
sun_elev = solar_position[1, 2]
plot(build, main = time)
plot(location, add = TRUE)
sun = shadow:::sunLocation(location = location, sun_az = sun_az, sun_elev = sun_elev)
sun_ray = ray(from = location, to = sun)
build_outline = as(build, "SpatialLinesDataFrame")
inter = gIntersection(build_outline, sun_ray)
plot(sun_ray, add = TRUE, col = "yellow")
plot(inter, add = TRUE, col = "red")
shadeHeight(location, build, "BLDG_HT", sun_az, sun_elev)

# Grid
ext = as(extent(build), "SpatialPolygons")
r = raster(ext, res = 3)
proj4string(r) = proj4string(build)
grid = rasterToPoints(r, spatial = TRUE)
grid = SpatialPointsDataFrame(grid, data.frame(grid_id = 1:length(grid)))
height_field = "BLDG_HT"
for(i in 1:length(grid)) {
  grid$shade_height[i] =
    shadeHeight(grid[i, ], build, height_field, sun_az, sun_elev)
}
shade = as(grid, "SpatialPixelsDataFrame")
shade = raster(shade, layer = "shade_height")
plot(shade, col = grey(seq(0.9, 0.2, -0.01)), main = time)
contour(shade, add = TRUE)
plot(build, add = TRUE, border = "red")

}

